#!/usr/bin/env bash

# 2FA: A little OTP keys manager written in Bash

# Dependencies: coreutils, bash, oathtool
# Optional dependencies: qrencode, feh

# TODO list
# 1 - Add the possibility to scan (zbarcam) QR codes when adding new accounts. 
#+ Use /dev/video0 as default video device. Add an option (-V) to specify 
#+ the video device.

SUCCESS=0
ERROR=1

NAME="2fa"
AUTHOR="L. Abramovich"
VERSION="0.3.2"
DATE="December 20, 2020"
WEBSITE="https://github.com/leo-arch/2fa"
LICENSE="GPL2+"

KEYS_PATH="$HOME/.config/$NAME"
CONFIG_FILE="$KEYS_PATH/${NAME}.conf"
TMP_DIR="/tmp"

### FUNCTIONS DEFINITIONS ###

function echoerr ()
{
	echo -e "$@" >&2
}

function help ()
{
	echo -e "${NAME}: An OTP keys manager
Usage: ${NAME} [OPTIONS]

  -a NAME	Add a new account named NAME
  -d NAME	Delete the account NAME
  -D 		Same as -d, but lists available accounts to choose from
  -f FILE	Use FILE to get the key when adding a new account. This option \
must be used before the -a option	
  -h		Print this help and exit
  -i NAME	Display the QR code image of account NAME
  -I 		Same as -i, but lists available accounts to choose from
  -l		List available accounts
  -p NAME	Print the OTP password of account NAME
  -P 		Same as -p, but lists available accounts to choose from
  -v		Print version information
  -x		Specify the image viewer to be used to display a QR code image. \
It must be used before the -i and -I options

If no option is specified, the default action (-P) will be executed.

Accounts are stored in ${KEYS_PATH}. The configuration file is \
${CONFIG_FILE}. You can specify here the default image viewer."
}

function version ()
{
	echo -e "$NAME $VERSION ($DATE) by $AUTHOR
Website: $WEBSITE\nLicense: $LICENSE"
}

function check_config ()
{
	if ! [[ -d "$KEYS_PATH" ]]; then
		/usr/bin/mkdir -p "$KEYS_PATH"
		/usr/bin/chmod 700 "$KEYS_PATH"
	fi
	if ! [[ -e "$CONFIG_FILE" ]]; then
		echo "viewer=feh;xloadimage;gpicview;mirage;ristretto;lximage-qt;\
eog;eom;gwenview;imv;deepin-image-viewer;ephoto;eyesight;galapix;nomacs;\
phototonic;photoqt;pqiv;qimv;qimgv;qiv;qview;viewnior;sxiv;vimiv;vpv;shufti;\
geeqie;fbida;fbv;fim;jfview" > "$CONFIG_FILE"
		/usr/bin/chmod 600 "$CONFIG_FILE"
	fi
}

function check_oath ()
{
	if ! [[ $(type -P /usr/bin/oathtool) ]]; then
		echoerr "oathtool: Command not found"
		exit $ERROR
	fi
}

function check_qrencode ()
{
	if ! [[ $(type -P /usr/bin/qrencode) ]]; then
		echoerr "qrencode: Command not found"
		exit $ERROR
	fi
}

function get_accounts ()
{
	mapfile -t accounts< <(/usr/bin/ls "$KEYS_PATH" 2>/dev/null \
	| /usr/bin/grep -v ".*.conf")

	if [[ ${#accounts[*]} -eq 0 ]]; then
		echoerr "No accounts found"
		echo "Use the -a option to add a new account"
		exit $ERROR
	fi
}

function check_account ()
{
	get_accounts

	account=$1

	if [[ -z $account ]]; then
		for (( i=0;i<${#accounts[*]};i++ )); do
			echo "$((i+1)) - ${accounts[$i]}"
		done

		read -rp "Choose an account: " answer

		if [[ $answer -gt ${#accounts[*]} || $answer -le 0 ]]; then
			echoerr "'$answer': Invalid account"
			exit $ERROR
		fi
		
		account="$(echo "${accounts[$((answer-1))]}")"
		
	elif [[ ${accounts[*]} != *" $account"* ]]; then
		echoerr "${account}: No such account"
		exit $ERROR
	fi
}

function check_viewer ()
{
	VIEWER_BIN=""

	if [[ -n $usr_viewer ]]; then
		if [[ $(type -P "$usr_viewer") ]]; then
			VIEWER_BIN="$usr_viewer"
		else
			echoerr "${usr_viewer}: Command not found"
		fi
	else
		echo "No image viewer specified"
	fi

	if [[ -z $VIEWER_BIN ]]; then
		viewers=( $(/usr/bin/grep "viewer" "$CONFIG_FILE" 2>/dev/null \
		| /usr/bin/cut -d"=" -f2 | /usr/bin/sed 's/;/ /g') )
		for i in ${viewers[*]}; do
			echo -ne "Trying ${i}... "
			if [[ $(type -P "$i") ]]; then
				VIEWER_BIN="$i"
				echo "OK"
				break;
			else
				echo "Failed"
			fi
		done

		if [[ -z $VIEWER_BIN ]]; then
			echoerr "No image viewer found"
			echo "QR code image saved to $TMP_DIR/${account}.png"
			exit $ERROR
		fi
	fi
}

function del_account ()
{
	get_accounts

	account="$1"
	check_account "$account"

	for i in ${accounts[*]}; do
		if [[ $i == $account ]]; then
			/usr/bin/rm "${KEYS_PATH}/$account"
			if ! [[ -e "${KEYS_PATH}/$account" ]]; then
				echo "${account}: Account succesfully removed"
			fi
			exit $SUCESS
		fi
	done
	
	echoerr "${account}: No such account"
	exit $ERROR
}

function gen_account ()
{
	get_accounts
	
	account="$1"

	while [[ -z $account ]]; do
		read -p "Account: " account
	done
	
	for i in ${accounts[*]}; do
		if [[ $i == $account ]]; then
			echoerr "${account}: Account already exist"
			exit $ERROR
		fi
	done
	
	if [[  -z $img_file ]]; then
		key=""
		while [[ -z $key ]]; do
			read -p "Key: " key
		done
	else
		get_key_from_img "$img_file"
		if [[ -z $key ]]; then
			echoerr "Error decoding QR code from $img_file"
			exit $ERROR
		fi
	fi
	
	echo "$key" > "${KEYS_PATH}/$account"
	
	if [[ -f "${KEYS_PATH}/$account" ]]; then
		echo "${account}: Account successfully generated"
		/usr/bin/chmod 600 "${KEYS_PATH}/$account"
	else
		echoerr "${account}: Error generating account"
		exit $ERROR
	fi
}

function list_accounts ()
{
	get_accounts

	for i in ${accounts[*]}; do
		echo "$i"
	done
}

function get_key ()
{
	account=$1
	key="$(/usr/bin/sed -n 1p "$KEYS_PATH"/"$account")"
}

function get_key_from_img ()
{
	file="$1"
	
	if ! [[ -f "$img_file" ]]; then
		echoerr "$img_file: No such file or directory"
		exit $ERROR
	fi
	
	if ! [[ $(type -P /usr/bin/zbarimg) ]]; then
		echoerr "zbarimg: Command not found"
		exit $ERROR
	fi
	
	value=$(/usr/bin/zbarimg -q --raw "$img_file")
	
	if [[ $value == *"secret="* ]]; then
		key=$(echo "$value" | /usr/bin/cut -d"=" -f2)
	else
		key="$value"
	fi
}

function display_qr ()
{
	check_qrencode

	check_oath

	account="$1"
	check_account "$account"

	get_key "$account"

	if ! /usr/bin/qrencode -s10 -d300 -lH -o "$TMP_DIR/${account}.png" "otpauth://totp/${account}?secret=${key}"; then
		echoerr "Error generating QR code. Try again."
		exit $ERROR
	fi

	check_viewer

	[[ -z $DISPLAY ]] && DISPLAY=":0.0"

	if $VIEWER_BIN "$TMP_DIR/${account}.png"; then
		# If the image was correctly displayed, remove it
		/usr/bin/rm "$TMP_DIR/${account}.png"
	else # If the image could not be displayed, tell the user where to find it
		echo "QR code image saved to $TMP_DIR/${account}.png"
	fi

}

function print_otp ()
{
	check_oath

	account=$1
	check_account "$account"

	get_key "$account"

	if ! /usr/bin/oathtool -b -d6 --totp=sha1 "$key"; then
		exit $ERROR
	fi
}

function main ()
{
	gen_qr=0
	account=""
	usr_viewer=""
	img_file=""

	check_config

	# If no argument, run the default action
	if [[ -z $1 ]]; then
		print_otp
		exit $SUCCESS
	fi

	while getopts ":a:Dd:f:hIi:lPp:vx:" opt; do
		case $opt in
			
			a) gen_account "$OPTARG" ;;

			d) del_account "$OPTARG" ;;

			D) del_account ;;
			
			f) img_file="$OPTARG" ;;
			
			h) help ;;

			i)
				gen_qr=1
				display_qr "$OPTARG"
			;;

			I)
				gen_qr=1
				display_qr
			;;

			l) list_accounts ;;
			
			p) print_otp "$OPTARG" ;;

			P) print_otp ;;
			
			v) version ;;

			x) usr_viewer="$OPTARG" ;;

			\?)
				echoerr "$NAME: '$OPTARG': Invalid option\nTry '$NAME -h' for more information"
				exit $ERROR
			;;

			:)
				echoerr "$NAME: '$OPTARG': This option requires an argument\nTry '$NAME -h' for more information"
				exit $ERROR
			;;
		esac
	done
}

#### MAIN ####

main "$@"

exit $SUCCESS
